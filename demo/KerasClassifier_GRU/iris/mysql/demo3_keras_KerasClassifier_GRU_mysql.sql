-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : KerasClassifier_GRU
-- Dataset : iris
-- Database : mysql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH RECURSIVE keras_input AS 
(SELECT `ADS`.`KEY` AS `KEY`, `ADS`.`Feature_0` AS `Feature_0`, `ADS`.`Feature_1` AS `Feature_1`, `ADS`.`Feature_2` AS `Feature_2`, `ADS`.`Feature_3` AS `Feature_3` 
FROM iris AS `ADS`), 
keras_input_1 AS 
(SELECT keras_input.`KEY` AS `KEY`, keras_input.`Feature_0` AS `Feature_0`, keras_input.`Feature_1` AS `Feature_1`, keras_input.`Feature_2` AS `Feature_2`, keras_input.`Feature_3` AS `Feature_3` 
FROM keras_input), 
keras_input_1_rn AS 
(SELECT row_number() OVER (ORDER BY keras_input_1.`KEY` ASC) AS rn, keras_input_1.`KEY` AS `KEY`, keras_input_1.`Feature_0` AS `Feature_0`, keras_input_1.`Feature_1` AS `Feature_1`, keras_input_1.`Feature_2` AS `Feature_2`, keras_input_1.`Feature_3` AS `Feature_3` 
FROM keras_input_1), 
gru_input_kernel_bias AS 
(SELECT keras_input_1_rn.rn AS rn, keras_input_1_rn.`KEY` AS `KEY`, keras_input_1_rn.`Feature_0` AS `Feature_0`, keras_input_1_rn.`Feature_1` AS `Feature_1`, keras_input_1_rn.`Feature_2` AS `Feature_2`, keras_input_1_rn.`Feature_3` AS `Feature_3`, 0.08792540205218843 + -0.073223847243395 * keras_input_1_rn.`Feature_0` + 0.44066143704704275 * keras_input_1_rn.`Feature_1` + 0.00978626162801934 * keras_input_1_rn.`Feature_2` + 0.03477791686801173 * keras_input_1_rn.`Feature_3` AS dot_prod_z_1, 0.0 + 0.5664769474564575 * keras_input_1_rn.`Feature_0` + -0.10433297737716374 * keras_input_1_rn.`Feature_1` + 0.6144268301148657 * keras_input_1_rn.`Feature_2` + 0.7653194061893915 * keras_input_1_rn.`Feature_3` AS dot_prod_z_2, 0.0 + -0.4791916586991701 * keras_input_1_rn.`Feature_0` + -0.6129810736826532 * keras_input_1_rn.`Feature_1` + -0.7522882410776167 * keras_input_1_rn.`Feature_2` + -0.6622454570567866 * keras_input_1_rn.`Feature_3` AS dot_prod_r_1, 0.0 + -0.28879253581968267 * keras_input_1_rn.`Feature_0` + 0.12763855553755143 * keras_input_1_rn.`Feature_1` + -0.2790648571605788 * keras_input_1_rn.`Feature_2` + -0.3966151216257316 * keras_input_1_rn.`Feature_3` AS dot_prod_r_2, 0.5183233179343788 + -0.12200488268304292 * keras_input_1_rn.`Feature_0` + -0.22034447662184328 * keras_input_1_rn.`Feature_1` + -0.12376581110701575 * keras_input_1_rn.`Feature_2` + 0.3120230242624908 * keras_input_1_rn.`Feature_3` AS dot_prod_h_1, 0.0 + 0.3335265374845531 * keras_input_1_rn.`Feature_0` + -0.27572326342284403 * keras_input_1_rn.`Feature_1` + 0.19965769124877464 * keras_input_1_rn.`Feature_2` + -0.20665982842609176 * keras_input_1_rn.`Feature_3` AS dot_prod_h_2 
FROM keras_input_1_rn), 
rnn_cte_gru_1(rn_1, `KEY`, `PreviousState_1`, `PreviousState_2`, `State_1`, `State_2`) AS 
(SELECT gru_input_kernel_bias.rn AS rn_1, gru_input_kernel_bias.`KEY` AS `KEY`, CAST(0.0 AS DOUBLE) AS `PreviousState_1`, CAST(0.0 AS DOUBLE) AS `PreviousState_2`, (1.0 - greatest(0.0, least(1.0, 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_1) + 0.5))) * ((exp(0.0 + gru_input_kernel_bias.dot_prod_h_1) - exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_1))) / (exp(0.0 + gru_input_kernel_bias.dot_prod_h_1) + exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_1)))) AS `State_1`, (1.0 - greatest(0.0, least(1.0, 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_2) + 0.5))) * ((exp(0.0 + gru_input_kernel_bias.dot_prod_h_2) - exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_2))) / (exp(0.0 + gru_input_kernel_bias.dot_prod_h_2) + exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_2)))) AS `State_2` 
FROM gru_input_kernel_bias 
WHERE gru_input_kernel_bias.rn = 1 UNION ALL SELECT gru_input_kernel_bias.rn AS rn, gru_input_kernel_bias.`KEY` AS `KEY`, CAST(0.0 AS DOUBLE) AS `PreviousState_1`, CAST(0.0 AS DOUBLE) AS `PreviousState_2`, greatest(0.0, least(1.0, 0.2 * (0.07889305402131672 * CAST(0.0 AS DOUBLE) + -0.12001338771399168 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_z_1) + 0.5)) * CAST(0.0 AS DOUBLE) + (1.0 - greatest(0.0, least(1.0, 0.2 * (0.07889305402131672 * CAST(0.0 AS DOUBLE) + -0.12001338771399168 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_z_1) + 0.5))) * ((exp(0.19308494093258327 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + 0.7665848473643189 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_1) - exp(-(0.19308494093258327 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + 0.7665848473643189 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_1))) / (exp(0.19308494093258327 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + 0.7665848473643189 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_1) + exp(-(0.19308494093258327 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + 0.7665848473643189 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_1)))) AS `State_1`, greatest(0.0, least(1.0, 0.2 * (-0.034960511057912716 * CAST(0.0 AS DOUBLE) + -0.14062053889322335 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_z_2) + 0.5)) * CAST(0.0 AS DOUBLE) + (1.0 - greatest(0.0, least(1.0, 0.2 * (-0.034960511057912716 * CAST(0.0 AS DOUBLE) + -0.14062053889322335 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_z_2) + 0.5))) * ((exp(0.8028151871906004 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + -0.4545734405306024 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_2) - exp(-(0.8028151871906004 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + -0.4545734405306024 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_2))) / (exp(0.8028151871906004 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + -0.4545734405306024 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_2) + exp(-(0.8028151871906004 * greatest(0.0, least(1.0, 0.2 * (-0.1888178280225422 * CAST(0.0 AS DOUBLE) + -0.24466095906319685 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_1) + 0.5)) * CAST(0.0 AS DOUBLE) + -0.4545734405306024 * greatest(0.0, least(1.0, 0.2 * (-0.5245068706087566 * CAST(0.0 AS DOUBLE) + -0.3341770861035541 * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_r_2) + 0.5)) * CAST(0.0 AS DOUBLE) + gru_input_kernel_bias.dot_prod_h_2)))) AS `State_2` 
FROM gru_input_kernel_bias, rnn_cte_gru_1 
WHERE gru_input_kernel_bias.rn = rnn_cte_gru_1.rn_1 + 1), 
gru_1 AS 
(SELECT rnn_cte_gru_1.`KEY` AS `KEY`, CAST(rnn_cte_gru_1.`State_1` AS DOUBLE) AS output_1, CAST(rnn_cte_gru_1.`State_2` AS DOUBLE) AS output_2 
FROM rnn_cte_gru_1), 
gru_1_1 AS 
(SELECT gru_1.`KEY` AS `KEY`, gru_1.output_1 AS output_1, gru_1.output_2 AS output_2 
FROM gru_1), 
layer_dense_1 AS 
(SELECT gru_1_1.`KEY` AS `KEY`, -0.054794822817073326 + 0.14969074912394947 * gru_1_1.output_1 + -0.28988967716910585 * gru_1_1.output_2 AS output_1, 0.10675237958464436 + 0.8377294516612219 * gru_1_1.output_1 + -0.27976115144718106 * gru_1_1.output_2 AS output_2, -0.059965947787329124 + -0.5804724124221816 * gru_1_1.output_1 + -0.941305778610394 * gru_1_1.output_2 AS output_3 
FROM gru_1_1), 
layer_dense_1_1 AS 
(SELECT layer_dense_1.`KEY` AS `KEY`, layer_dense_1.output_1 AS output_1, layer_dense_1.output_2 AS output_2, layer_dense_1.output_3 AS output_3 
FROM layer_dense_1), 
score_soft_max_step1 AS 
(SELECT layer_dense_1_1.`KEY` AS `KEY`, layer_dense_1_1.output_1 AS `Score_0`, exp(least(100.0, greatest(-100.0, layer_dense_1_1.output_1))) AS `exp_Score_0`, layer_dense_1_1.output_2 AS `Score_1`, exp(least(100.0, greatest(-100.0, layer_dense_1_1.output_2))) AS `exp_Score_1`, layer_dense_1_1.output_3 AS `Score_2`, exp(least(100.0, greatest(-100.0, layer_dense_1_1.output_3))) AS `exp_Score_2` 
FROM layer_dense_1_1), 
score_class_union_soft AS 
(SELECT soft_scu.`KEY` AS `KEY`, soft_scu.class AS class, soft_scu.`exp_Score` AS `exp_Score` 
FROM (SELECT score_soft_max_step1.`KEY` AS `KEY`, 0 AS class, score_soft_max_step1.`exp_Score_0` AS `exp_Score` 
FROM score_soft_max_step1 UNION ALL SELECT score_soft_max_step1.`KEY` AS `KEY`, 1 AS class, score_soft_max_step1.`exp_Score_1` AS `exp_Score` 
FROM score_soft_max_step1 UNION ALL SELECT score_soft_max_step1.`KEY` AS `KEY`, 2 AS class, score_soft_max_step1.`exp_Score_2` AS `exp_Score` 
FROM score_soft_max_step1) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_step1.`KEY` AS `KEY`, score_soft_max_step1.`Score_0` AS `Score_0`, score_soft_max_step1.`exp_Score_0` AS `exp_Score_0`, score_soft_max_step1.`Score_1` AS `Score_1`, score_soft_max_step1.`exp_Score_1` AS `exp_Score_1`, score_soft_max_step1.`Score_2` AS `Score_2`, score_soft_max_step1.`exp_Score_2` AS `exp_Score_2`, sum_exp_t.`KEY_sum` AS `KEY_sum`, sum_exp_t.`sum_ExpScore` AS `sum_ExpScore` 
FROM score_soft_max_step1 LEFT OUTER JOIN (SELECT score_class_union_soft.`KEY` AS `KEY_sum`, sum(score_class_union_soft.`exp_Score`) AS `sum_ExpScore` 
FROM score_class_union_soft GROUP BY score_class_union_soft.`KEY`) AS sum_exp_t ON score_soft_max_step1.`KEY` = sum_exp_t.`KEY_sum`), 
layer_softmax AS 
(SELECT score_soft_max.`KEY` AS `KEY`, score_soft_max.`exp_Score_0` / score_soft_max.`sum_ExpScore` AS output_1, score_soft_max.`exp_Score_1` / score_soft_max.`sum_ExpScore` AS output_2, score_soft_max.`exp_Score_2` / score_soft_max.`sum_ExpScore` AS output_3 
FROM score_soft_max), 
orig_cte AS 
(SELECT layer_softmax.`KEY` AS `KEY`, NULL AS `Score_0`, NULL AS `Score_1`, NULL AS `Score_2`, layer_softmax.output_1 AS `Proba_0`, layer_softmax.output_2 AS `Proba_1`, layer_softmax.output_3 AS `Proba_2`, NULL AS `LogProba_0`, NULL AS `LogProba_1`, NULL AS `LogProba_2`, CAST(NULL AS SIGNED INTEGER) AS `Decision`, NULL AS `DecisionProba` 
FROM layer_softmax), 
score_class_union AS 
(SELECT scu.`KEY_u` AS `KEY_u`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY_u`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 2 AS class, orig_cte.`LogProba_2` AS `LogProba`, orig_cte.`Proba_2` AS `Proba`, orig_cte.`Score_2` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Score_2` AS `Score_2`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`Proba_2` AS `Proba_2`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`LogProba_2` AS `LogProba_2`, orig_cte.`Decision` AS `Decision`, orig_cte.`DecisionProba` AS `DecisionProba`, max_select.`KEY_m` AS `KEY_m`, max_select.`max_Proba` AS `max_Proba` 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.`KEY_u` AS `KEY_m`, max(score_class_union.`Proba`) AS `max_Proba` 
FROM score_class_union GROUP BY score_class_union.`KEY_u`) AS max_select ON orig_cte.`KEY` = max_select.`KEY_m`), 
union_with_max AS 
(SELECT score_class_union.`KEY_u` AS `KEY_u`, score_class_union.class AS class, score_class_union.`LogProba` AS `LogProba`, score_class_union.`Proba` AS `Proba`, score_class_union.`Score` AS `Score`, score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Score_2` AS `Score_2`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`Proba_2` AS `Proba_2`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`LogProba_2` AS `LogProba_2`, score_max.`Decision` AS `Decision`, score_max.`DecisionProba` AS `DecisionProba`, score_max.`KEY_m` AS `KEY_m`, score_max.`max_Proba` AS `max_Proba` 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.`KEY_u` = score_max.`KEY`), 
arg_max_cte AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Score_2` AS `Score_2`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`Proba_2` AS `Proba_2`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`LogProba_2` AS `LogProba_2`, score_max.`Decision` AS `Decision`, score_max.`DecisionProba` AS `DecisionProba`, score_max.`KEY_m` AS `KEY_m`, score_max.`max_Proba` AS `max_Proba`, `arg_max_t_Proba`.`KEY_Proba` AS `KEY_Proba`, `arg_max_t_Proba`.`arg_max_Proba` AS `arg_max_Proba` 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.`KEY` AS `KEY_Proba`, max(union_with_max.class) AS `arg_max_Proba` 
FROM union_with_max 
WHERE union_with_max.`max_Proba` <= union_with_max.`Proba` GROUP BY union_with_max.`KEY`) AS `arg_max_t_Proba` ON score_max.`KEY` = `arg_max_t_Proba`.`KEY_Proba`)
 SELECT arg_max_cte.`KEY` AS `KEY`, arg_max_cte.`Score_0` AS `Score_0`, arg_max_cte.`Score_1` AS `Score_1`, arg_max_cte.`Score_2` AS `Score_2`, arg_max_cte.`Proba_0` AS `Proba_0`, arg_max_cte.`Proba_1` AS `Proba_1`, arg_max_cte.`Proba_2` AS `Proba_2`, CASE WHEN (arg_max_cte.`Proba_0` IS NULL OR arg_max_cte.`Proba_0` > 0.0) THEN ln(arg_max_cte.`Proba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`Proba_1` IS NULL OR arg_max_cte.`Proba_1` > 0.0) THEN ln(arg_max_cte.`Proba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, CASE WHEN (arg_max_cte.`Proba_2` IS NULL OR arg_max_cte.`Proba_2` > 0.0) THEN ln(arg_max_cte.`Proba_2`) ELSE -1.79769313486231e+308 END AS `LogProba_2`, arg_max_cte.`arg_max_Proba` AS `Decision`, arg_max_cte.`max_Proba` AS `DecisionProba` 
FROM arg_max_cte