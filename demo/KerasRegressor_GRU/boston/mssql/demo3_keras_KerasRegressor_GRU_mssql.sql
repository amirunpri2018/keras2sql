-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : KerasRegressor_GRU
-- Dataset : boston
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH keras_input AS 
(SELECT [ADS].[KEY] AS [KEY], [ADS].[Feature_0] AS [Feature_0], [ADS].[Feature_1] AS [Feature_1], [ADS].[Feature_2] AS [Feature_2], [ADS].[Feature_3] AS [Feature_3], [ADS].[Feature_4] AS [Feature_4], [ADS].[Feature_5] AS [Feature_5], [ADS].[Feature_6] AS [Feature_6], [ADS].[Feature_7] AS [Feature_7], [ADS].[Feature_8] AS [Feature_8], [ADS].[Feature_9] AS [Feature_9], [ADS].[Feature_10] AS [Feature_10], [ADS].[Feature_11] AS [Feature_11], [ADS].[Feature_12] AS [Feature_12] 
FROM boston AS [ADS]), 
keras_input_1 AS 
(SELECT keras_input.[KEY] AS [KEY], keras_input.[Feature_0] AS [Feature_0], keras_input.[Feature_1] AS [Feature_1], keras_input.[Feature_2] AS [Feature_2], keras_input.[Feature_3] AS [Feature_3], keras_input.[Feature_4] AS [Feature_4], keras_input.[Feature_5] AS [Feature_5], keras_input.[Feature_6] AS [Feature_6], keras_input.[Feature_7] AS [Feature_7], keras_input.[Feature_8] AS [Feature_8], keras_input.[Feature_9] AS [Feature_9], keras_input.[Feature_10] AS [Feature_10], keras_input.[Feature_11] AS [Feature_11], keras_input.[Feature_12] AS [Feature_12] 
FROM keras_input), 
keras_input_1_rn AS 
(SELECT row_number() OVER (ORDER BY keras_input_1.[KEY] ASC) AS rn, keras_input_1.[KEY] AS [KEY], keras_input_1.[Feature_0] AS [Feature_0], keras_input_1.[Feature_1] AS [Feature_1], keras_input_1.[Feature_2] AS [Feature_2], keras_input_1.[Feature_3] AS [Feature_3], keras_input_1.[Feature_4] AS [Feature_4], keras_input_1.[Feature_5] AS [Feature_5], keras_input_1.[Feature_6] AS [Feature_6], keras_input_1.[Feature_7] AS [Feature_7], keras_input_1.[Feature_8] AS [Feature_8], keras_input_1.[Feature_9] AS [Feature_9], keras_input_1.[Feature_10] AS [Feature_10], keras_input_1.[Feature_11] AS [Feature_11], keras_input_1.[Feature_12] AS [Feature_12] 
FROM keras_input_1), 
gru_input_kernel_bias AS 
(SELECT keras_input_1_rn.rn AS rn, keras_input_1_rn.[KEY] AS [KEY], keras_input_1_rn.[Feature_0] AS [Feature_0], keras_input_1_rn.[Feature_1] AS [Feature_1], keras_input_1_rn.[Feature_2] AS [Feature_2], keras_input_1_rn.[Feature_3] AS [Feature_3], keras_input_1_rn.[Feature_4] AS [Feature_4], keras_input_1_rn.[Feature_5] AS [Feature_5], keras_input_1_rn.[Feature_6] AS [Feature_6], keras_input_1_rn.[Feature_7] AS [Feature_7], keras_input_1_rn.[Feature_8] AS [Feature_8], keras_input_1_rn.[Feature_9] AS [Feature_9], keras_input_1_rn.[Feature_10] AS [Feature_10], keras_input_1_rn.[Feature_11] AS [Feature_11], keras_input_1_rn.[Feature_12] AS [Feature_12], -0.09892222835409625 + 0.4068326713599776 * keras_input_1_rn.[Feature_0] + 0.022227385690106474 * keras_input_1_rn.[Feature_1] + 0.4772396286649882 * keras_input_1_rn.[Feature_2] + 0.21973202622736854 * keras_input_1_rn.[Feature_3] + -0.4497979324513968 * keras_input_1_rn.[Feature_4] + 0.005175594962279366 * keras_input_1_rn.[Feature_5] + -0.39152794729936274 * keras_input_1_rn.[Feature_6] + -0.5010535054013644 * keras_input_1_rn.[Feature_7] + -0.4902505211076519 * keras_input_1_rn.[Feature_8] + -0.19222607069674869 * keras_input_1_rn.[Feature_9] + 0.0386540266214031 * keras_input_1_rn.[Feature_10] + 0.10605251632331039 * keras_input_1_rn.[Feature_11] + 0.18927599337225903 * keras_input_1_rn.[Feature_12] AS dot_prod_z_1, 0.0 + -0.4074373805869893 * keras_input_1_rn.[Feature_0] + -0.2577318242333171 * keras_input_1_rn.[Feature_1] + 0.06773428958227101 * keras_input_1_rn.[Feature_2] + -0.5182594419988606 * keras_input_1_rn.[Feature_3] + 0.06980621812186694 * keras_input_1_rn.[Feature_4] + 0.0018709070375910741 * keras_input_1_rn.[Feature_5] + -0.04610055563225479 * keras_input_1_rn.[Feature_6] + -0.3744014808038046 * keras_input_1_rn.[Feature_7] + 0.42841520273030953 * keras_input_1_rn.[Feature_8] + -0.051089783255783394 * keras_input_1_rn.[Feature_9] + -0.21245646964605597 * keras_input_1_rn.[Feature_10] + 0.5099585889920377 * keras_input_1_rn.[Feature_11] + -0.09056088582392763 * keras_input_1_rn.[Feature_12] AS dot_prod_z_2, 0.0 + -0.2620631286201561 * keras_input_1_rn.[Feature_0] + -0.2424985476111643 * keras_input_1_rn.[Feature_1] + -0.24775016181291515 * keras_input_1_rn.[Feature_2] + -0.4405574457817548 * keras_input_1_rn.[Feature_3] + -0.1777643802611638 * keras_input_1_rn.[Feature_4] + 0.4111353136123512 * keras_input_1_rn.[Feature_5] + -0.5506803308139041 * keras_input_1_rn.[Feature_6] + 0.5518181193097949 * keras_input_1_rn.[Feature_7] + -0.43444058955200193 * keras_input_1_rn.[Feature_8] + 0.519824954156028 * keras_input_1_rn.[Feature_9] + 0.45226840637996224 * keras_input_1_rn.[Feature_10] + -0.32546569186158203 * keras_input_1_rn.[Feature_11] + -0.048038152178559335 * keras_input_1_rn.[Feature_12] AS dot_prod_r_1, 0.0 + 0.5097266913921459 * keras_input_1_rn.[Feature_0] + -0.0005300379328861959 * keras_input_1_rn.[Feature_1] + 0.5329627154546304 * keras_input_1_rn.[Feature_2] + -0.45595179165993255 * keras_input_1_rn.[Feature_3] + -0.08757509166046462 * keras_input_1_rn.[Feature_4] + 0.050820453103034735 * keras_input_1_rn.[Feature_5] + 0.17163706240938592 * keras_input_1_rn.[Feature_6] + -0.09384555326088778 * keras_input_1_rn.[Feature_7] + 0.19455773559756617 * keras_input_1_rn.[Feature_8] + -0.3308791753172632 * keras_input_1_rn.[Feature_9] + 0.38952682013992057 * keras_input_1_rn.[Feature_10] + 0.4123022526047443 * keras_input_1_rn.[Feature_11] + -0.10124200938806699 * keras_input_1_rn.[Feature_12] AS dot_prod_r_2, 0.0 + 0.3905405190015492 * keras_input_1_rn.[Feature_0] + 0.04407370329983107 * keras_input_1_rn.[Feature_1] + 0.5452621379926303 * keras_input_1_rn.[Feature_2] + -0.3587125238943447 * keras_input_1_rn.[Feature_3] + 0.23087238457127646 * keras_input_1_rn.[Feature_4] + -0.521263636645617 * keras_input_1_rn.[Feature_5] + -0.023605957206372263 * keras_input_1_rn.[Feature_6] + -0.3449451183235783 * keras_input_1_rn.[Feature_7] + -0.17554391341102 * keras_input_1_rn.[Feature_8] + -0.22494142210359258 * keras_input_1_rn.[Feature_9] + 0.4741862985256875 * keras_input_1_rn.[Feature_10] + -0.42794443893809986 * keras_input_1_rn.[Feature_11] + 0.14708115920501752 * keras_input_1_rn.[Feature_12] AS dot_prod_h_1, 0.0 + 0.042199659502565656 * keras_input_1_rn.[Feature_0] + 0.08901551235523675 * keras_input_1_rn.[Feature_1] + -0.3975648085778438 * keras_input_1_rn.[Feature_2] + 0.30820669748313956 * keras_input_1_rn.[Feature_3] + -0.056276738388540526 * keras_input_1_rn.[Feature_4] + -0.37168606294825557 * keras_input_1_rn.[Feature_5] + 0.3487798215064677 * keras_input_1_rn.[Feature_6] + -0.06771400186752269 * keras_input_1_rn.[Feature_7] + -0.24997278005986606 * keras_input_1_rn.[Feature_8] + 0.5484117543862974 * keras_input_1_rn.[Feature_9] + 0.21561600118639246 * keras_input_1_rn.[Feature_10] + 0.5013758244284663 * keras_input_1_rn.[Feature_11] + 0.3958583769574783 * keras_input_1_rn.[Feature_12] AS dot_prod_h_2 
FROM keras_input_1_rn), 
rnn_cte_gru_1(rn_1, [KEY], [PreviousState_1], [PreviousState_2], [State_1], [State_2]) AS 
(SELECT gru_input_kernel_bias.rn AS rn_1, gru_input_kernel_bias.[KEY] AS [KEY], CAST(0.0 AS FLOAT(53)) AS [PreviousState_1], CAST(0.0 AS FLOAT(53)) AS [PreviousState_2], (1.0 - CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_1) + 0.5) THEN 1.0 ELSE 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_1) + 0.5) THEN 1.0 ELSE 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_1) + 0.5 END ELSE 0.0 END) * ((exp(0.0 + gru_input_kernel_bias.dot_prod_h_1) - exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_1))) / (exp(0.0 + gru_input_kernel_bias.dot_prod_h_1) + exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_1)))) AS [State_1], (1.0 - CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_2) + 0.5) THEN 1.0 ELSE 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_2) + 0.5) THEN 1.0 ELSE 0.2 * (0.0 + gru_input_kernel_bias.dot_prod_z_2) + 0.5 END ELSE 0.0 END) * ((exp(0.0 + gru_input_kernel_bias.dot_prod_h_2) - exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_2))) / (exp(0.0 + gru_input_kernel_bias.dot_prod_h_2) + exp(-(0.0 + gru_input_kernel_bias.dot_prod_h_2)))) AS [State_2] 
FROM gru_input_kernel_bias 
WHERE gru_input_kernel_bias.rn = 1 UNION ALL SELECT gru_input_kernel_bias.rn AS rn, gru_input_kernel_bias.[KEY] AS [KEY], CAST(0.0 AS FLOAT(53)) AS [PreviousState_1], CAST(0.0 AS FLOAT(53)) AS [PreviousState_2], CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5) THEN 1.0 ELSE 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5) THEN 1.0 ELSE 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + (1.0 - CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5) THEN 1.0 ELSE 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5) THEN 1.0 ELSE 0.2 * (0.8138234813332196 * CAST(0.0 AS FLOAT(53)) + 0.03861754315374066 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_1) + 0.5 END ELSE 0.0 END) * ((exp(-0.20629458740002615 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.18588036651285594 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_1) - exp(-(-0.20629458740002615 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.18588036651285594 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_1))) / (exp(-0.20629458740002615 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.18588036651285594 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_1) + exp(-(-0.20629458740002615 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.18588036651285594 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_1)))) AS [State_1], CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5) THEN 1.0 ELSE 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5) THEN 1.0 ELSE 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + (1.0 - CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5) THEN 1.0 ELSE 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5) THEN 1.0 ELSE 0.2 * (0.08426053191069505 * CAST(0.0 AS FLOAT(53)) + 0.27805107213113867 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_z_2) + 0.5 END ELSE 0.0 END) * ((exp(-0.2775259356596579 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.3697689785282325 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_2) - exp(-(-0.2775259356596579 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.3697689785282325 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_2))) / (exp(-0.2775259356596579 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.3697689785282325 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_2) + exp(-(-0.2775259356596579 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5) THEN 1.0 ELSE 0.2 * (-0.43752735121956315 * CAST(0.0 AS FLOAT(53)) + -0.4361016447237923 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_1) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + 0.3697689785282325 * CASE WHEN (0.0 <= CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END) THEN CASE WHEN (1.0 <= 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5) THEN 1.0 ELSE 0.2 * (-0.1399400556427051 * CAST(0.0 AS FLOAT(53)) + 0.7481517452896373 * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_r_2) + 0.5 END ELSE 0.0 END * CAST(0.0 AS FLOAT(53)) + gru_input_kernel_bias.dot_prod_h_2)))) AS [State_2] 
FROM gru_input_kernel_bias, rnn_cte_gru_1 
WHERE gru_input_kernel_bias.rn = rnn_cte_gru_1.rn_1 + 1), 
gru_1 AS 
(SELECT rnn_cte_gru_1.[KEY] AS [KEY], CAST(rnn_cte_gru_1.[State_1] AS FLOAT(53)) AS output_1, CAST(rnn_cte_gru_1.[State_2] AS FLOAT(53)) AS output_2 
FROM rnn_cte_gru_1), 
gru_1_1 AS 
(SELECT gru_1.[KEY] AS [KEY], gru_1.output_1 AS output_1, gru_1.output_2 AS output_2 
FROM gru_1), 
layer_dense_1 AS 
(SELECT gru_1_1.[KEY] AS [KEY], 4.0563045054866915 + -4.78121428345077 * gru_1_1.output_1 + 1.9093287432259667 * gru_1_1.output_2 AS output_1 
FROM gru_1_1)
 SELECT layer_dense_1.[KEY] AS [KEY], layer_dense_1.output_1 AS [Estimator] 
FROM layer_dense_1